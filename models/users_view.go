// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsersView is an object representing the database table.
type UsersView struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	TenantID  int64     `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
}

var UsersViewColumns = struct {
	ID        string
	TenantID  string
	Name      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	TenantID:  "tenant_id",
	Name:      "name",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var UsersViewTableColumns = struct {
	ID        string
	TenantID  string
	Name      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "users_view.id",
	TenantID:  "users_view.tenant_id",
	Name:      "users_view.name",
	CreatedAt: "users_view.created_at",
	UpdatedAt: "users_view.updated_at",
}

// Generated where

var UsersViewWhere = struct {
	ID        whereHelperint64
	TenantID  whereHelperint64
	Name      whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "`users_view`.`id`"},
	TenantID:  whereHelperint64{field: "`users_view`.`tenant_id`"},
	Name:      whereHelperstring{field: "`users_view`.`name`"},
	CreatedAt: whereHelpertime_Time{field: "`users_view`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`users_view`.`updated_at`"},
}

var (
	usersViewAllColumns            = []string{"id", "tenant_id", "name", "created_at", "updated_at"}
	usersViewColumnsWithoutDefault = []string{"tenant_id", "name"}
	usersViewColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	usersViewPrimaryKeyColumns     = []string{}
	usersViewGeneratedColumns      = []string{}
)

type (
	// UsersViewSlice is an alias for a slice of pointers to UsersView.
	// This should almost always be used instead of []UsersView.
	UsersViewSlice []*UsersView
	// UsersViewHook is the signature for custom UsersView hook methods
	UsersViewHook func(context.Context, boil.ContextExecutor, *UsersView) error

	usersViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usersViewType           = reflect.TypeOf(&UsersView{})
	usersViewMapping        = queries.MakeStructMapping(usersViewType)
	usersViewInsertCacheMut sync.RWMutex
	usersViewInsertCache    = make(map[string]insertCache)
	usersViewUpdateCacheMut sync.RWMutex
	usersViewUpdateCache    = make(map[string]updateCache)
	usersViewUpsertCacheMut sync.RWMutex
	usersViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var usersViewAfterSelectMu sync.Mutex
var usersViewAfterSelectHooks []UsersViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsersView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsersViewHook registers your hook function for all future operations.
func AddUsersViewHook(hookPoint boil.HookPoint, usersViewHook UsersViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usersViewAfterSelectMu.Lock()
		usersViewAfterSelectHooks = append(usersViewAfterSelectHooks, usersViewHook)
		usersViewAfterSelectMu.Unlock()
	}
}

// One returns a single usersView record from the query.
func (q usersViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsersView, error) {
	o := &UsersView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for users_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsersView records from the query.
func (q usersViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsersViewSlice, error) {
	var o []*UsersView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsersView slice")
	}

	if len(usersViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsersView records in the query.
func (q usersViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count users_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usersViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if users_view exists")
	}

	return count > 0, nil
}

// UsersViews retrieves all the records using an executor.
func UsersViews(mods ...qm.QueryMod) usersViewQuery {
	mods = append(mods, qm.From("`users_view`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`users_view`.*"})
	}

	return usersViewQuery{q}
}
